name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # - name: Checkout no_hello repo
    #   uses: actions/checkout@v2
    #   with:
    #     repository: <no_hello_repo_owner>/<no_hello_repo_name>
    #     path: repos/no_hello

    # - name: Checkout job_bot repo
    #   uses: actions/checkout@v2
    #   with:
    #     repository: <job_bot_repo_owner>/<job_bot_repo_name>
    #     path: repos/job_bot

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform format
      run: terraform fmt   

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: github.ref == 'refs/heads/main'
      id: plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_public_key: ${{ secrets.PUBLIC_KEY }}
      run: |
        set +e
        output=$(terraform plan -input=false -lock=false -no-color -out=tfplan)
        changes=$(echo "$output" | grep "No changes")
        if [[ -z "$changes" ]]; then
          echo "APPLY_REQUIRED=true" >> $GITHUB_ENV
        else
          echo "APPLY_REQUIRED=false" >> $GITHUB_ENV
        fi
      continue-on-error: true
      
    # - name: Terraform Show
    #   if: github.ref == 'refs/heads/main'
    #   id: show
    #   run: |
    #     output=$(terraform show -json)
    #     if [[ -z "$output" || "$output" == *"\"values\": {}"* ]]; then
    #       echo "SHOW_APPLY_REQUIRED=true" >> $GITHUB_ENV
    #     else
    #       echo "SHOW_APPLY_REQUIRED=false" >> $GITHUB_ENV
    #     fi

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && env.APPLY_REQUIRED == 'true'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_public_key: ${{ secrets.PUBLIC_KEY }}
      run: terraform apply -auto-approve -input=false tfplan

    - name: Check if commit message contains "destroy"
      id: check_commit_message
      run: |
        commit_message=$(git log --format=%B -n 1 ${{ github.event.after }})
        if [[ $commit_message == *"destroy"* ]]; then
          echo "::set-output name=destroy_required::true"
        else
          echo "::set-output name=destroy_required::false"
        fi

    - name: Terraform Destroy
      if: steps.check_commit_message.outputs.destroy_required == 'true'
      run: |
        terraform init -input=false
        terraform destroy -auto-approve